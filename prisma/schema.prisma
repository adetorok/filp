generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(cuid())
  name                 String
  email                String             @unique
  password             String
  company              String?
  phone                String?
  role                 Role               @default(USER)
  isActive             Boolean            @default(true)
  lastLoginAt          DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  twoFactorSecret      String?
  twoFactorEnabled     Boolean            @default(false)
  timezone             String             @default("UTC")
  language             String             @default("en")
  deletedAt            DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  auditLogs            AuditLog[]
  contacts             Contact[]
  contractorReviews    ContractorReview[]
  deals                Deal[]
  expenses             Expense[]
  properties           Property[]
  rentalExpenses       RentalExpense[]
  rentalIncome         RentalIncome[]
  rentalProperties     RentalProperty[]
  rentalTasks          RentalTask[]
  subscription         Subscription?
  tasks                Task[]
  tenants              Tenant[]

  @@map("users")
}

model Property {
  id                   String           @id @default(cuid())
  userId               String
  street               String
  city                 String
  state                String
  zipCode              String
  fullAddress          String
  propertyType         PropertyType     @default(SINGLE_FAMILY)
  bedrooms             Int?
  bathrooms            Int?
  squareFeet           Int?
  lotSize              Float?
  yearBuilt            Int?
  condition            Condition        @default(FAIR)
  purchasePrice        Float?
  estimatedRepairCosts Float?
  estimatedARV         Float?
  estimatedProfit      Float?
  estimatedROI         Float?
  estimatedTimeline    Int?
  status               PropertyStatus   @default(ANALYZING)
  notes                String?
  images               String[]
  documents            String[]
  deletedAt            DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deals                Deal[]
  expenses             Expense[]
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  rentalProperties     RentalProperty[]
  tasks                Task[]

  @@map("properties")
}

model Deal {
  id                String        @id @default(cuid())
  userId            String
  propertyId        String
  dealName          String?
  offerPrice        Float?
  maxOffer          Float?
  closingCosts      Float?
  holdingCosts      Float?
  repairCosts       Float?
  sellingCosts      Float?
  totalInvestment   Float?
  estimatedARV      Float?
  estimatedProfit   Float?
  estimatedROI      Float?
  estimatedTimeline Int?
  status            DealStatus    @default(ANALYZING)
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  financingType     FinancingType @default(CASH)
  downPayment       Float?
  interestRate      Float?
  loanTerm          Int?
  monthlyPayment    Float?
  property          Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses          Expense[]
  tasks             Task[]

  @@map("deals")
}

model Expense {
  id             String          @id @default(cuid())
  userId         String
  propertyId     String
  dealId         String?
  category       ExpenseCategory
  subcategory    String?
  description    String
  amount         Float
  vendor         String?
  paymentMethod  PaymentMethod   @default(CASH)
  date           DateTime        @default(now())
  receipt        String?
  notes          String?
  isReimbursable Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deal           Deal?           @relation(fields: [dealId], references: [id])
  property       Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expenses")
}

model Task {
  id             String     @id @default(cuid())
  userId         String
  propertyId     String
  dealId         String?
  title          String
  description    String
  priority       Priority   @default(MEDIUM)
  status         TaskStatus @default(PENDING)
  dueDate        DateTime?
  completedAt    DateTime?
  estimatedHours Int?
  actualHours    Int?
  notes          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deal           Deal?      @relation(fields: [dealId], references: [id])
  property       Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Contact {
  id          String   @id @default(cuid())
  userId      String
  type        String
  name        String
  company     String?
  email       String?
  phone       String?
  address     Json?
  specialties String[]
  rating      Int?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Subscription {
  id           String             @id @default(cuid())
  userId       String             @unique
  plan         SubscriptionPlan   @default(FREE)
  status       SubscriptionStatus @default(ACTIVE)
  startDate    DateTime           @default(now())
  endDate      DateTime?
  price        Float?
  billingCycle BillingCycle       @default(MONTHLY)
  autoRenew    Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model RentalProperty {
  id             String          @id @default(cuid())
  userId         String
  propertyId     String
  monthlyRent    Float
  deposit        Float?
  leaseStartDate DateTime
  leaseEndDate   DateTime?
  status         RentalStatus    @default(VACANT)
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  expenses       RentalExpense[]
  income         RentalIncome[]
  property       Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks          RentalTask[]
  tenants        Tenant[]

  @@map("rental_properties")
}

model Tenant {
  id               String         @id @default(cuid())
  userId           String
  rentalPropertyId String
  name             String
  email            String?
  phone            String?
  emergencyContact Json?
  moveInDate       DateTime
  moveOutDate      DateTime?
  status           TenantStatus   @default(ACTIVE)
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  rentalIncome     RentalIncome[]
  rentalProperty   RentalProperty @relation(fields: [rentalPropertyId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tenants")
}

model RentalIncome {
  id               String         @id @default(cuid())
  userId           String
  rentalPropertyId String
  tenantId         String?
  amount           Float
  category         IncomeCategory
  description      String?
  receivedDate     DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  rentalProperty   RentalProperty @relation(fields: [rentalPropertyId], references: [id], onDelete: Cascade)
  tenant           Tenant?        @relation(fields: [tenantId], references: [id])
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rental_income")
}

model RentalExpense {
  id               String                @id @default(cuid())
  userId           String
  rentalPropertyId String
  amount           Float
  category         RentalExpenseCategory
  description      String
  vendor           String?
  date             DateTime              @default(now())
  receipt          String?
  notes            String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  rentalProperty   RentalProperty        @relation(fields: [rentalPropertyId], references: [id], onDelete: Cascade)
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rental_expenses")
}

model RentalTask {
  id               String             @id @default(cuid())
  userId           String
  rentalPropertyId String
  title            String
  description      String
  priority         Priority           @default(MEDIUM)
  status           RentalTaskCategory @default(MAINTENANCE)
  dueDate          DateTime?
  completedDate    DateTime?
  assignedTo       String?
  cost             Float?
  notes            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  rentalProperty   RentalProperty     @relation(fields: [rentalPropertyId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rental_tasks")
}

model Area {
  id          String                @id @default(cuid())
  type        AreaType
  name        String
  state       String
  code        String
  population  Int?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  contractors ContractorAreaScore[]
  projects    Project[]

  @@map("areas")
}

model Contractor {
  id                          String                         @id @default(cuid())
  name                        String
  companyName                 String?
  phone                       String?
  email                       String?
  website                     String?
  address1                    String?
  address2                    String?
  city                        String?
  state                       String?
  zip                         String?
  trades                      Trade[]
  yearsInBusiness             Int?
  totalProjects               Int                            @default(0)
  totalValue                  Decimal?
  businessStartDate           DateTime?
  createdAt                   DateTime                       @default(now())
  updatedAt                   DateTime                       @updatedAt
  areaScores                  ContractorAreaScore[]
  contacts                    ContractorContact[]
  licenses                    ContractorLicense[]
  membership                  ContractorMembership?
  portal                      ContractorPortal?
  reviews                     ContractorReview[]
  workSpecializations         ContractorWorkSpecialization[]
  insurancePermitCorrelations InsurancePermitCorrelation[]
  policies                    InsurancePolicy[]
  legalEvents                 LegalEvent[]
  permits                     Permit[]
  projects                    Project[]
  challenges                  RankingChallenge[]

  @@map("contractors")
}

model ContractorContact {
  id           String     @id @default(cuid())
  contractorId String
  name         String
  email        String?
  phone        String?
  role         String?
  isPrimary    Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@map("contractor_contacts")
}

model ContractorLicense {
  id            String        @id @default(cuid())
  contractorId  String
  number        String
  state         String
  boardName     String?
  status        LicenseStatus @default(ACTIVE)
  adminVerified Boolean       @default(false)
  verifiedAt    DateTime?
  expiresOn     DateTime?
  sourceUrl     String?
  lastCheckedAt DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contractor    Contractor    @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([contractorId, number, state])
  @@index([state, number])
  @@map("contractor_licenses")
}

model InsurancePolicy {
  id                          String                       @id @default(cuid())
  contractorId                String
  type                        InsuranceType
  insurerName                 String
  policyNumber                String?
  coverageEachOccur           Decimal?
  coverageAggregate           Decimal?
  expiresOn                   DateTime?
  brokerName                  String?
  brokerEmail                 String?
  brokerPhone                 String?
  certificateUrl              String?
  lastVerifiedAt              DateTime?
  insurancePermitCorrelations InsurancePermitCorrelation[]
  contractor                  Contractor                   @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([contractorId, policyNumber, type])
  @@index([expiresOn])
  @@index([contractorId, type])
  @@map("insurance_policies")
}

model LegalEvent {
  id           String        @id @default(cuid())
  contractorId String
  type         LegalType
  severity     LegalSeverity
  title        String
  description  String?
  filedOn      DateTime?
  resolvedOn   DateTime?
  sourceUrl    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  contractor   Contractor    @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@map("legal_events")
}

model Project {
  id                          String                       @id @default(cuid())
  contractorId                String
  areaId                      String
  trade                       Trade
  status                      ProjectStatus                @default(PLANNED)
  plannedStart                DateTime?
  plannedEnd                  DateTime?
  actualStart                 DateTime?
  actualEnd                   DateTime?
  budgetPlanned               Decimal?
  budgetActual                Decimal?
  warrantyMonths              Int?
  createdAt                   DateTime                     @default(now())
  reviews                     ContractorReview[]
  inspections                 Inspection[]
  insurancePermitCorrelations InsurancePermitCorrelation[]
  permits                     Permit[]
  area                        Area                         @relation(fields: [areaId], references: [id], onDelete: Cascade)
  contractor                  Contractor                   @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  callbacks                   WarrantyCallback[]

  @@index([contractorId, areaId, status])
  @@map("projects")
}

model ContractorReview {
  id            String     @id @default(cuid())
  projectId     String
  customerId    String
  stars         Int
  quality       Int
  timeliness    Int
  communication Int
  cleanliness   Int
  safety        Int
  comment       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  contractorId  String
  contractor    Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  customer      User       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  project       Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, customerId])
  @@index([contractorId, createdAt])
  @@index([stars, createdAt])
  @@map("contractor_reviews")
}

model Inspection {
  id          String    @id @default(cuid())
  projectId   String
  type        String
  scheduledAt DateTime
  completedAt DateTime?
  inspector   String?
  status      String
  notes       String?
  photos      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("inspections")
}

model WarrantyCallback {
  id          String    @id @default(cuid())
  projectId   String
  reportedAt  DateTime  @default(now())
  description String
  resolvedAt  DateTime?
  cost        Decimal?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("warranty_callbacks")
}

model ContractorAreaScore {
  id           String     @id @default(cuid())
  contractorId String
  areaId       String
  score        Int
  grade        String
  period       String
  subscores    Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  area         Area       @relation(fields: [areaId], references: [id], onDelete: Cascade)
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([contractorId, areaId, period])
  @@map("contractor_area_scores")
}

model Permit {
  id                          String                       @id @default(cuid())
  projectId                   String
  contractorId                String
  permitNumber                String
  permitType                  PermitType
  status                      PermitStatus                 @default(REQUESTED)
  description                 String
  workDescription             String?
  propertyAddress             String
  city                        String
  state                       String
  zipCode                     String
  requestedDate               DateTime
  approvedDate                DateTime?
  issuedDate                  DateTime?
  completedDate               DateTime?
  expiredDate                 DateTime?
  cost                        Decimal?
  inspectorName               String?
  inspectionNotes             String?
  publicUrl                   String?
  createdAt                   DateTime                     @default(now())
  updatedAt                   DateTime                     @updatedAt
  insurancePermitCorrelations InsurancePermitCorrelation[]
  inspections                 PermitInspection[]
  contractor                  Contractor                   @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  project                     Project                      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([permitNumber, city, state])
  @@unique([contractorId, permitNumber, city])
  @@index([contractorId, requestedDate])
  @@index([projectId])
  @@index([status, requestedDate])
  @@map("permits")
}

model PermitInspection {
  id             String    @id @default(cuid())
  permitId       String
  inspectionType String
  scheduledDate  DateTime
  completedDate  DateTime?
  inspectorName  String
  status         String
  notes          String?
  violations     String?
  photos         String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  permit         Permit    @relation(fields: [permitId], references: [id], onDelete: Cascade)

  @@map("permit_inspections")
}

model ContractorWorkSpecialization {
  id              String             @id @default(cuid())
  contractorId    String
  specialization  WorkSpecialization
  permitCount     Int                @default(0)
  totalValue      Decimal?           @default(0)
  averageDuration Int?
  successRate     Decimal?           @default(0)
  lastWorkDate    DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  contractor      Contractor         @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@unique([contractorId, specialization])
  @@index([contractorId])
  @@map("contractor_work_specializations")
}

model InsurancePermitCorrelation {
  id                String          @id @default(cuid())
  contractorId      String
  projectId         String
  insurancePolicyId String
  permitId          String
  correlationType   String
  daysDifference    Int?
  riskLevel         String
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  contractor        Contractor      @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  insurancePolicy   InsurancePolicy @relation(fields: [insurancePolicyId], references: [id], onDelete: Cascade)
  permit            Permit          @relation(fields: [permitId], references: [id], onDelete: Cascade)
  project           Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("insurance_permit_correlations")
}

model ContractorPortal {
  id           String             @id @default(cuid())
  contractorId String             @unique
  username     String             @unique
  passwordHash String
  isActive     Boolean            @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  contractor   Contractor         @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  challenges   RankingChallenge[]

  @@map("contractor_portals")
}

model RankingChallenge {
  id            String           @id @default(cuid())
  contractorId  String
  portalId      String
  challengeType ChallengeType
  description   String
  evidence      String?
  status        ChallengeStatus  @default(PENDING)
  adminNotes    String?
  resolvedAt    DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  contractor    Contractor       @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  portal        ContractorPortal @relation(fields: [portalId], references: [id], onDelete: Cascade)

  @@map("ranking_challenges")
}

model ContractorMembership {
  id             String           @id @default(cuid())
  contractorId   String           @unique
  membershipType MembershipType   @default(BASIC)
  status         MembershipStatus @default(ACTIVE)
  startDate      DateTime         @default(now())
  endDate        DateTime?
  autoRenew      Boolean          @default(false)
  paymentMethod  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  contractor     Contractor       @relation(fields: [contractorId], references: [id], onDelete: Cascade)

  @@map("contractor_memberships")
}

model AuditLog {
  id         String      @id @default(cuid())
  actorId    String?
  action     AuditAction
  targetType String
  targetId   String
  meta       Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime    @default(now())
  actor      User?       @relation(fields: [actorId], references: [id])

  @@index([actorId, createdAt])
  @@map("audit_logs")
}

enum Role {
  ADMIN
  USER
  CONTRACTOR
  STAFF
}

enum PropertyType {
  SINGLE_FAMILY
  CONDO
  TOWNHOUSE
  MULTI_FAMILY
  COMMERCIAL
  LAND
  OTHER
}

enum Condition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  NEEDS_WORK
}

enum PropertyStatus {
  ANALYZING
  UNDER_CONTRACT
  IN_PROGRESS
  COMPLETED
  SOLD
  CANCELLED
}

enum DealStatus {
  ANALYZING
  OFFER_MADE
  UNDER_CONTRACT
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum FinancingType {
  CASH
  CONVENTIONAL
  FHA
  VA
  HARD_MONEY
  PRIVATE_MONEY
  OTHER
}

enum ExpenseCategory {
  PURCHASE
  REPAIRS
  RENOVATIONS
  HOLDING_COSTS
  SELLING_COSTS
  FINANCING
  INSURANCE
  UTILITIES
  PERMITS
  INSPECTIONS
  OTHER
}

enum PaymentMethod {
  CASH
  CHECK
  CREDIT_CARD
  BANK_TRANSFER
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubscriptionPlan {
  FREE
  PRO
  RENTAL_BASIC
  RENTAL_PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum RentalStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
  RENTED
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  EVICTED
  MOVED_OUT
}

enum IncomeCategory {
  RENT
  LATE_FEES
  PET_FEES
  OTHER
}

enum RentalExpenseCategory {
  MAINTENANCE
  REPAIRS
  UTILITIES
  INSURANCE
  PROPERTY_TAX
  MANAGEMENT_FEES
  LEGAL_FEES
  OTHER
}

enum RentalTaskCategory {
  MAINTENANCE
  REPAIRS
  INSPECTIONS
  CLEANING
  LANDSCAPING
  OTHER
}

enum AreaType {
  CITY
  ZIP
  COUNTY
  STATE
}

enum Trade {
  GENERAL
  GC
  PLUMBING
  ELECTRICAL
  HVAC
  ROOFING
  PAINTING
  FLOORING
  OTHER
}

enum LicenseStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
  PENDING
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum InsuranceType {
  GL
  WC
  AUTO
  UMBRELLA
  OTHER
}

enum LegalSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum LegalType {
  LAWSUIT
  VIOLATION
  COMPLAINT
  OSHA_VIOLATION
  BBB_COMPLAINT
  OTHER
}

enum PermitStatus {
  REQUESTED
  APPROVED
  ISSUED
  INSPECTED
  COMPLETED
  EXPIRED
  REJECTED
  CANCELLED
}

enum PermitType {
  BUILDING
  ELECTRICAL
  PLUMBING
  HVAC
  ROOFING
  DEMOLITION
  FENCE
  POOL
  DRIVEWAY
  SIDEWALK
  OTHER
}

enum WorkSpecialization {
  RESIDENTIAL_REMODEL
  COMMERCIAL_BUILD
  KITCHEN_BATH
  ADDITION
  FOUNDATION
  ROOFING
  ELECTRICAL
  PLUMBING
  HVAC
  FLOORING
  PAINTING
  LANDSCAPING
  POOL_SPA
  OTHER
}

enum ChallengeType {
  RANKING_DISPUTE
  REVIEW_DISPUTE
  LICENSE_UPDATE
  INSURANCE_UPDATE
  LEGAL_EVENT_DISPUTE
  OTHER
}

enum ChallengeStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  RESOLVED
}

enum MembershipType {
  BASIC
  PREMIUM
  PROFESSIONAL
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  CANCELLED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
}
